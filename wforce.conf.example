webserver("0.0.0.0:8084", "super")
setKey("Ay9KXgU3g4ygK+qWT0Ut4gH8PPz02gbtPeXWPdjD0HE=")
controlSocket("0.0.0.0:4004")

addSibling("192.168.1.79")
addSibling("192.168.1.30")
addSibling("192.168.1.54")
siblingListener("0.0.0.0")

bulkRetrievers = newNetmaskGroup()
bulkRetrievers:addMask("130.161.0.0/16")
bulkRetrievers:addMask("145.132.0.0/16")

-- Field map contains as many different fields as you like
-- Supported types are:
--			 "int" - simple counter
--			 "hll" - cardinality (count how many different things you put in the bucket)
--			 "countmin" - like a multi-valued bloom filter. Counts how many of each type there are.
field_map = {}
field_map["countLogins"] = "int"
field_map["diffPasswords"] = "hll"
field_map["diffIPs"] = "hll"
field_map["countryCount"] = "countmin"

-- create a db for storing stats. 
-- You can create multiple dbs with different window lengths for storing stats over different time windows
-- This one is 6 windows of 10 minutes each, so an hour in total. Every 10 minutes the oldest window's data will expire
sdb = newStringStatsDB(600,6,field_map)
-- This one is 24 windows of 1 hour each, so 24 hours in total. Useful for tracking long-term stats.
-- You can reuse field_map or create a different one
sdb_day = newStringStatsDB(3600, 24, field_map)

-- Only initialize the GeoIPDB if you need it
initGeoIPDB()

function allow(wfdb, lt)
	if(bulkRetrievers:match(lt.remote))
	then
		return 0
	end

	-- Example GeoIP lookup
	--	if (lookupCountry(lt.remote) ~= "GB")
	-- then
	--	return -1
	-- end

	cur_ct = lookupCountry(lt.remote) 

	-- A note on keys: You can use strings or ComboAddresses. ComboAdddress will be converted to a string and then used as a key.
	-- XXX - TODO - allow to specify a netmask when creating the DB, which will be used for all ComboAddress keys
	-- twAdd() is the generic way to add things to the stats bucket. For integers it does addition
	sdb:twAdd(lt.login, "countLogins", 1)
	sdb:twAdd(lt.remote, "countLogins", 1)
	sdb:twAdd(lt.login, "diffPasswords", lt.pwhash)
	sdb:twAdd(lt.login, "diffIPs", lt.remote)
	sdb_day:twAdd(lt.login, "countryCount", cur_ct)

	-- twSub() can be used for the integer type. It does what you expect

	-- twGet() returns the "sum" of all the values over all the time windows. 
	-- For integer and countmin types, this is just a sum. For HLL, it's a union.
	if (sdb:twGet(lt.login, "diffPasswords") > 90)
	then
		return -1
	end

	-- If user is logging in from multiple IPs and we haven't seen this country in the last 24 hours then reject
	if ((sdb:twGet(lt.login, "diffIPs") > 5) and (sdb_day.twGet(lt.login, "countryCount", cur_ct) < 2))
	then
		return -1
	end

	-- We also have:
	--		 twGetCurrent() which returns the value for the current window 
	--		 twGetWindows() which returns a table with all window values (this is a bit weird because it's a circular buffer so the "current window" is almost certainly not the first value). XXX - Should probably sort it before returning so it's in order of time ([1] = now)

	if(wfdb:countDiffFailuresAddress(lt.remote, 10) > 50)
	then
		return -1
	end

	if(wfdb:countDiffFailuresAddressLogin(lt.remote, lt.login, 10) > 3)
	then
		return -1
	end

	return 0
end

setAllow(allow)